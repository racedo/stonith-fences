#!/usr/bin/python

# The Following Agent Has Been Tested On:
#
# Vmware fusion 4.1.3 on MacOS X 10.7.4
#

import sys
import pexpect
import exceptions
sys.path.append("/usr/share/fence")
from fencing import *

#BEGIN_VERSION_GENERATION
RELEASE_VERSION = "0.0.1"
BUILD_DATE = "(built Fri Aug 10 11:20:18 UTC 2012)"
REDHAT_COPYRIGHT = "Copyright (C) Eric Edgar"
#END_VERSION_GENERATION

# Returns an array with all the MACs of all the VMs that are powered on 
def get_outlets_status(conn, options):
    results = []
    mac_results = {}
    result = {}
    try:
        conn.sendline('''IFS=$\'\\n\';for x in $(mdfind vmwarevm |grep ".vmwarevm$"); do IFS=$\'\\n\';find $x -name \*vmx -exec grep -H "Address " {} \; ;done|sort|uniq''')
        conn.log_expect(options, options["--command-prompt"], int(options["--shell-timeout"]))
    except pexpect.EOF:
        fail(EC_CONNECTION_LOST)
    except pexpect.TIMEOUT:
        fail(EC_TIMED_OUT)
    else:
        results = conn.before.splitlines()[3:-1]
        for line in results:
            file, data = line.split(':', 1)
            mac = data.split("= ")[1].strip("\"")
            mac_results.setdefault(file, []).append(mac)

    try:
        conn.sendline("/Applications/VMware\ Fusion.app/Contents/Library/vmrun list")
        conn.log_expect(options, options["--command-prompt"], int(options["--shell-timeout"]))
    except pexpect.EOF:
        fail(EC_CONNECTION_LOST)
    except pexpect.TIMEOUT:
        fail(EC_TIMED_OUT)
    else:
        results = conn.before.splitlines()[2:]

        for line in results:
                if line in mac_results:
                    for mac in mac_results[line]:
                        result[mac.replace(":", "_").upper()] = ("", "on")
    return result


def get_power_status(conn, options):
	outlets=get_outlets_status(conn,options)

        return ((options["-n"].upper() in outlets) and "on" or "off")


def set_power_status(conn, options):
    try:
        data = '''IFS=$\'\\n\';for x in $(mdfind vmwarevm |grep ".vmwarevm$"); do IFS=$\'\\n\';find $x -name \*vmx -exec grep -H "Address " {} \; ;done|grep -i %s|uniq'''
        conn.sendline(data.replace('%s', options['-n'].replace("_", ":").upper()))
        conn.log_expect(options, options["--command-prompt"], int(options["--shell-timeout"]))
    except pexpect.EOF:
        fail(EC_CONNECTION_LOST)
    except pexpect.TIMEOUT:
        fail(EC_TIMED_OUT)
    else:
        results = conn.before.splitlines()[3:]
        for line in results:
            file, data = line.split(':', 1)
            if options['-n'].replace("_", ":").upper() in data.upper():
                try:
                    conn.sendline("/Applications/VMware\ Fusion.app/Contents/Library/vmrun -T fusion %s" % (options["--action"] == "on" and "start '%s' gui" % file or "stop '%s' hard" % file))
                    conn.log_expect(options, options["--command-prompt"], int(options["--shell-timeout"]))
                    time.sleep(1)
                except pexpect.EOF:
                    fail(EC_CONNECTION_LOST)
                except pexpect.TIMEOUT:
                    fail(EC_TIMED_OUT)


def main():
    device_opt = ["help", "version", "agent", "verbose", "debug", 
                  "action", "ipaddr", "login", "passwd", "passwd_script",
                  "secure", "identity_file", "port", "separator",
                  "inet4_only", "inet6_only", "ipport", "power_timeout",
                  "shell_timeout", "login_timeout", "power_wait"]

    atexit.register(atexit_handler)

    pinput = process_input(device_opt)
    pinput["-x"] = 1
    options = check_input(device_opt, pinput)

    ## Defaults for fence agent
    if not "--command-prompt" in options:
        options["--command-prompt"] = "\$\ "

    if not "--action" in options:
        options["--action"] = "reboot"

    options["ssh_options"] = "-t '/bin/bash -c \"PS1=\[EXPECT\]#\  /bin/bash --noprofile --norc\"'"

    docs = {}
    docs["shortdesc"] = "Fence agent for vmware fusion"
    docs["longdesc"] = "fence_fusion is an vmware fusionFencing agent \
which can be used with the virtual machines managed by vmware fusion. \
It logs via ssh to a vmware fusion host and there run vmrun command, which does \
all work. \
\n.P\n\
By default, vmrun needs root account to do properly work. So you \
must allow ssh login in your sshd_config."
    show_docs(options, docs)

    ## Operate the fencing device
    conn = fence_login(options)
    result = fence_action(conn, options, set_power_status, get_power_status, get_outlets_status)

    ## Logout from system
    try:
        conn.sendline("quit")
        conn.close()
    except exceptions.OSError:
        pass
    except pexpect.ExceptionPexpect:
        pass

    sys.exit(result)

if __name__ == "__main__":
    main()
